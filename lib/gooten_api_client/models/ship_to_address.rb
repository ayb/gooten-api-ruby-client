=begin
Gooten API

An overview of the various API methods that Gooten offers, including examples of each.

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module GootenApiClient
  class ShipToAddress
    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :line1

    attr_accessor :line2

    attr_accessor :city

    attr_accessor :state

    attr_accessor :country_code

    attr_accessor :postal_code

    attr_accessor :is_business_address

    attr_accessor :phone

    attr_accessor :email

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'first_name' => :'FirstName',
        
        :'last_name' => :'LastName',
        
        :'line1' => :'Line1',
        
        :'line2' => :'Line2',
        
        :'city' => :'City',
        
        :'state' => :'State',
        
        :'country_code' => :'CountryCode',
        
        :'postal_code' => :'PostalCode',
        
        :'is_business_address' => :'IsBusinessAddress',
        
        :'phone' => :'Phone',
        
        :'email' => :'Email'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'line1' => :'String',
        :'line2' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'country_code' => :'String',
        :'postal_code' => :'String',
        :'is_business_address' => :'BOOLEAN',
        :'phone' => :'String',
        :'email' => :'String'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'FirstName']
        self.first_name = attributes[:'FirstName']
      end
      
      if attributes[:'LastName']
        self.last_name = attributes[:'LastName']
      end
      
      if attributes[:'Line1']
        self.line1 = attributes[:'Line1']
      end
      
      if attributes[:'Line2']
        self.line2 = attributes[:'Line2']
      end
      
      if attributes[:'City']
        self.city = attributes[:'City']
      end
      
      if attributes[:'State']
        self.state = attributes[:'State']
      end
      
      if attributes[:'CountryCode']
        self.country_code = attributes[:'CountryCode']
      end
      
      if attributes[:'PostalCode']
        self.postal_code = attributes[:'PostalCode']
      end
      
      if attributes[:'IsBusinessAddress']
        self.is_business_address = attributes[:'IsBusinessAddress']
      end
      
      if attributes[:'Phone']
        self.phone = attributes[:'Phone']
      end
      
      if attributes[:'Email']
        self.email = attributes[:'Email']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          line1 == o.line1 &&
          line2 == o.line2 &&
          city == o.city &&
          state == o.state &&
          country_code == o.country_code &&
          postal_code == o.postal_code &&
          is_business_address == o.is_business_address &&
          phone == o.phone &&
          email == o.email
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [first_name, last_name, line1, line2, city, state, country_code, postal_code, is_business_address, phone, email].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = GootenApiClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
