=begin
Gooten API

An overview of the various API methods that Gooten offers, including examples of each.

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module GootenApiClient
  class ProductBuildInfo
    attr_accessor :id

    attr_accessor :description

    attr_accessor :type

    attr_accessor :z_index

    attr_accessor :x1

    attr_accessor :x2

    attr_accessor :y1

    attr_accessor :y2

    attr_accessor :color

    attr_accessor :background_image_url

    attr_accessor :overlay_image_url

    attr_accessor :font_name

    attr_accessor :font_size

    attr_accessor :font_h_alignment

    attr_accessor :font_v_alighment

    attr_accessor :default_text

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'Id',
        
        :'description' => :'Description',
        
        :'type' => :'Type',
        
        :'z_index' => :'ZIndex',
        
        :'x1' => :'X1',
        
        :'x2' => :'X2',
        
        :'y1' => :'Y1',
        
        :'y2' => :'Y2',
        
        :'color' => :'Color',
        
        :'background_image_url' => :'BackgroundImageUrl',
        
        :'overlay_image_url' => :'OverlayImageUrl',
        
        :'font_name' => :'FontName',
        
        :'font_size' => :'FontSize',
        
        :'font_h_alignment' => :'FontHAlignment',
        
        :'font_v_alighment' => :'FontVAlighment',
        
        :'default_text' => :'DefaultText'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'description' => :'String',
        :'type' => :'String',
        :'z_index' => :'Integer',
        :'x1' => :'Integer',
        :'x2' => :'Integer',
        :'y1' => :'Integer',
        :'y2' => :'Integer',
        :'color' => :'String',
        :'background_image_url' => :'String',
        :'overlay_image_url' => :'String',
        :'font_name' => :'String',
        :'font_size' => :'String',
        :'font_h_alignment' => :'String',
        :'font_v_alighment' => :'String',
        :'default_text' => :'String'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'Id']
        self.id = attributes[:'Id']
      end
      
      if attributes[:'Description']
        self.description = attributes[:'Description']
      end
      
      if attributes[:'Type']
        self.type = attributes[:'Type']
      end
      
      if attributes[:'ZIndex']
        self.z_index = attributes[:'ZIndex']
      end
      
      if attributes[:'X1']
        self.x1 = attributes[:'X1']
      end
      
      if attributes[:'X2']
        self.x2 = attributes[:'X2']
      end
      
      if attributes[:'Y1']
        self.y1 = attributes[:'Y1']
      end
      
      if attributes[:'Y2']
        self.y2 = attributes[:'Y2']
      end
      
      if attributes[:'Color']
        self.color = attributes[:'Color']
      end
      
      if attributes[:'BackgroundImageUrl']
        self.background_image_url = attributes[:'BackgroundImageUrl']
      end
      
      if attributes[:'OverlayImageUrl']
        self.overlay_image_url = attributes[:'OverlayImageUrl']
      end
      
      if attributes[:'FontName']
        self.font_name = attributes[:'FontName']
      end
      
      if attributes[:'FontSize']
        self.font_size = attributes[:'FontSize']
      end
      
      if attributes[:'FontHAlignment']
        self.font_h_alignment = attributes[:'FontHAlignment']
      end
      
      if attributes[:'FontVAlighment']
        self.font_v_alighment = attributes[:'FontVAlighment']
      end
      
      if attributes[:'DefaultText']
        self.default_text = attributes[:'DefaultText']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          description == o.description &&
          type == o.type &&
          z_index == o.z_index &&
          x1 == o.x1 &&
          x2 == o.x2 &&
          y1 == o.y1 &&
          y2 == o.y2 &&
          color == o.color &&
          background_image_url == o.background_image_url &&
          overlay_image_url == o.overlay_image_url &&
          font_name == o.font_name &&
          font_size == o.font_size &&
          font_h_alignment == o.font_h_alignment &&
          font_v_alighment == o.font_v_alighment &&
          default_text == o.default_text
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [id, description, type, z_index, x1, x2, y1, y2, color, background_image_url, overlay_image_url, font_name, font_size, font_h_alignment, font_v_alighment, default_text].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = GootenApiClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
