=begin
Gooten API

An overview of the various API methods that Gooten offers, including examples of each.

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module GootenApiClient
  class ProductvariantsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a list of available product variations. Includes pricing information
    # Get a list of all available product variations, or if one passes in a specific product type id (productId), gets a list of available variations of a recipe product.
    # @param country_code The country code the order would be shipped to. For example, &#39;US&#39; or &#39;FR&#39;
    # @param product_id Recipe product ID, such as those returned from the /products service
    # @param version Version of the api being used
    # @param source Description of the source-- ios, android, api, widget
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partner_billing_key Partner billing key
    # @option opts [String] :all Whether or not to return all available printio products, or just ones in your recipe. Pass &#39;true&#39; or &#39;false&#39;.
    # @option opts [String] :language_code Two-character language code, defaults to \&quot;en\&quot; (english)
    # @option opts [String] :currency_code Three character currency code, defaults to \&quot;USD\&quot; (united states dollar)
    # @return [ProductVariantResponse]
    def get_productvariants(country_code, product_id, version, source, opts = {})
      data, status_code, headers = get_productvariants_with_http_info(country_code, product_id, version, source, opts)
      return data
    end

    # Get a list of available product variations. Includes pricing information
    # Get a list of all available product variations, or if one passes in a specific product type id (productId), gets a list of available variations of a recipe product.
    # @param country_code The country code the order would be shipped to. For example, &#39;US&#39; or &#39;FR&#39;
    # @param product_id Recipe product ID, such as those returned from the /products service
    # @param version Version of the api being used
    # @param source Description of the source-- ios, android, api, widget
    # @param [Hash] opts the optional parameters
    # @option opts [String] :partner_billing_key Partner billing key
    # @option opts [String] :all Whether or not to return all available printio products, or just ones in your recipe. Pass &#39;true&#39; or &#39;false&#39;.
    # @option opts [String] :language_code Two-character language code, defaults to \&quot;en\&quot; (english)
    # @option opts [String] :currency_code Three character currency code, defaults to \&quot;USD\&quot; (united states dollar)
    # @return [Array<(ProductVariantResponse, Fixnum, Hash)>] ProductVariantResponse data, response status code and response headers
    def get_productvariants_with_http_info(country_code, product_id, version, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductvariantsApi#get_productvariants ..."
      end
      
      # verify the required parameter 'country_code' is set
      fail "Missing the required parameter 'country_code' when calling get_productvariants" if country_code.nil?
      
      # verify the required parameter 'product_id' is set
      fail "Missing the required parameter 'product_id' when calling get_productvariants" if product_id.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling get_productvariants" if version.nil?
      
      # verify the required parameter 'source' is set
      fail "Missing the required parameter 'source' when calling get_productvariants" if source.nil?
      
      # resource path
      local_var_path = "/v/{version}/source/{source}/productvariants/".sub('{format}','json').sub('{' + 'version' + '}', version.to_s).sub('{' + 'source' + '}', source.to_s)

      # query parameters
      query_params = {}
      query_params[:'countryCode'] = country_code
      query_params[:'productId'] = product_id
      query_params[:'partnerBillingKey'] = opts[:'partner_billing_key'] if opts[:'partner_billing_key']
      query_params[:'all'] = opts[:'all'] if opts[:'all']
      query_params[:'languageCode'] = opts[:'language_code'] if opts[:'language_code']
      query_params[:'currencyCode'] = opts[:'currency_code'] if opts[:'currency_code']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductVariantResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductvariantsApi#get_productvariants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
