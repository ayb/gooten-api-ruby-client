=begin
Gooten API


An overview of the various API methods that Gooten offers, including examples of each.


OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git




=end

require "uri"

module GootenApiClient

  class PreconfiguredproductsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Insert a preconfigured product
    # Insert a preconfigured product into your recipe.
    # @param preconfigured_product_insert The product to be inserted
    # @param version Version of the api being used
    # @param source Description of the source-- ios, android, api
    # @param [Hash] opts the optional parameters
    # @return [PreconfiguredProductsInsertResponse]
    def create_preconfiguredproducts(preconfigured_product_insert, version, source, opts = {})
      data, status_code, headers = create_preconfiguredproducts_with_http_info(preconfigured_product_insert, version, source, opts)
      return data
    end

    # Insert a preconfigured product
    # Insert a preconfigured product into your recipe.
    # @param preconfigured_product_insert The product to be inserted
    # @param version Version of the api being used
    # @param source Description of the source-- ios, android, api
    # @param [Hash] opts the optional parameters
    # @return [Array<(PreconfiguredProductsInsertResponse, Fixnum, Hash)>] PreconfiguredProductsInsertResponse data, response status code and response headers
    def create_preconfiguredproducts_with_http_info(preconfigured_product_insert, version, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PreconfiguredproductsApi#create_preconfiguredproducts ..."
      end
      
      # verify the required parameter 'preconfigured_product_insert' is set
      fail "Missing the required parameter 'preconfigured_product_insert' when calling create_preconfiguredproducts" if preconfigured_product_insert.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling create_preconfiguredproducts" if version.nil?
      
      # verify the required parameter 'source' is set
      fail "Missing the required parameter 'source' when calling create_preconfiguredproducts" if source.nil?
      
      # resource path
      local_var_path = "/v/{version}/source/{source}/preconfiguredproducts/".sub('{format}','json').sub('{' + 'version' + '}', version.to_s).sub('{' + 'source' + '}', source.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(preconfigured_product_insert)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PreconfiguredProductsInsertResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreconfiguredproductsApi#create_preconfiguredproducts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Delete a preconfigured product
    # Delete a preconfigured product from your recipe.
    # @param version Version of the api being used
    # @param source Description of the source-- ios, android, api
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sku The preconfigured product&#39;s sku.
    # @return [PreconfiguredProductsInsertResponse]
    def delete_preconfiguredproducts(version, source, opts = {})
      data, status_code, headers = delete_preconfiguredproducts_with_http_info(version, source, opts)
      return data
    end

    # Delete a preconfigured product
    # Delete a preconfigured product from your recipe.
    # @param version Version of the api being used
    # @param source Description of the source-- ios, android, api
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sku The preconfigured product&#39;s sku.
    # @return [Array<(PreconfiguredProductsInsertResponse, Fixnum, Hash)>] PreconfiguredProductsInsertResponse data, response status code and response headers
    def delete_preconfiguredproducts_with_http_info(version, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PreconfiguredproductsApi#delete_preconfiguredproducts ..."
      end
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling delete_preconfiguredproducts" if version.nil?
      
      # verify the required parameter 'source' is set
      fail "Missing the required parameter 'source' when calling delete_preconfiguredproducts" if source.nil?
      
      # resource path
      local_var_path = "/v/{version}/source/{source}/preconfiguredproducts/".sub('{format}','json').sub('{' + 'version' + '}', version.to_s).sub('{' + 'source' + '}', source.to_s)

      # query parameters
      query_params = {}
      query_params[:'sku'] = opts[:'sku'] if opts[:'sku']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PreconfiguredProductsInsertResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreconfiguredproductsApi#delete_preconfiguredproducts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Get a list of your preconfigured products
    # Get a list of your preconfigured products. The products returned are entirely specific to your recipe.
    # @param country_code The country code where it would be shipped to. For example, &#39;US&#39; or &#39;CA&#39;
    # @param version Version of the api being used
    # @param source Description of the source-- ios, android, api
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language_code Two-character language code, defaults to \&quot;en\&quot; (english)
    # @option opts [String] :currency_code Three character currency code, defaults to \&quot;USD\&quot; (united states dollar)
    # @return [PreconfiguredProductsResponse]
    def get_preconfiguredproducts(country_code, version, source, opts = {})
      data, status_code, headers = get_preconfiguredproducts_with_http_info(country_code, version, source, opts)
      return data
    end

    # Get a list of your preconfigured products
    # Get a list of your preconfigured products. The products returned are entirely specific to your recipe.
    # @param country_code The country code where it would be shipped to. For example, &#39;US&#39; or &#39;CA&#39;
    # @param version Version of the api being used
    # @param source Description of the source-- ios, android, api
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language_code Two-character language code, defaults to \&quot;en\&quot; (english)
    # @option opts [String] :currency_code Three character currency code, defaults to \&quot;USD\&quot; (united states dollar)
    # @return [Array<(PreconfiguredProductsResponse, Fixnum, Hash)>] PreconfiguredProductsResponse data, response status code and response headers
    def get_preconfiguredproducts_with_http_info(country_code, version, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PreconfiguredproductsApi#get_preconfiguredproducts ..."
      end
      
      # verify the required parameter 'country_code' is set
      fail "Missing the required parameter 'country_code' when calling get_preconfiguredproducts" if country_code.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling get_preconfiguredproducts" if version.nil?
      
      # verify the required parameter 'source' is set
      fail "Missing the required parameter 'source' when calling get_preconfiguredproducts" if source.nil?
      
      # resource path
      local_var_path = "/v/{version}/source/{source}/preconfiguredproducts/".sub('{format}','json').sub('{' + 'version' + '}', version.to_s).sub('{' + 'source' + '}', source.to_s)

      # query parameters
      query_params = {}
      query_params[:'countryCode'] = country_code
      query_params[:'languageCode'] = opts[:'language_code'] if opts[:'language_code']
      query_params[:'currencyCode'] = opts[:'currency_code'] if opts[:'currency_code']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PreconfiguredProductsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreconfiguredproductsApi#get_preconfiguredproducts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Update a preconfigured product
    # Update a preconfigured product into your recipe.
    # @param preconfigured_product_insert The product to be inserted
    # @param version Version of the api being used
    # @param source Description of the source-- ios, android, api
    # @param [Hash] opts the optional parameters
    # @return [PreconfiguredProductsInsertResponse]
    def update_preconfiguredproducts(preconfigured_product_insert, version, source, opts = {})
      data, status_code, headers = update_preconfiguredproducts_with_http_info(preconfigured_product_insert, version, source, opts)
      return data
    end

    # Update a preconfigured product
    # Update a preconfigured product into your recipe.
    # @param preconfigured_product_insert The product to be inserted
    # @param version Version of the api being used
    # @param source Description of the source-- ios, android, api
    # @param [Hash] opts the optional parameters
    # @return [Array<(PreconfiguredProductsInsertResponse, Fixnum, Hash)>] PreconfiguredProductsInsertResponse data, response status code and response headers
    def update_preconfiguredproducts_with_http_info(preconfigured_product_insert, version, source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PreconfiguredproductsApi#update_preconfiguredproducts ..."
      end
      
      # verify the required parameter 'preconfigured_product_insert' is set
      fail "Missing the required parameter 'preconfigured_product_insert' when calling update_preconfiguredproducts" if preconfigured_product_insert.nil?
      
      # verify the required parameter 'version' is set
      fail "Missing the required parameter 'version' when calling update_preconfiguredproducts" if version.nil?
      
      # verify the required parameter 'source' is set
      fail "Missing the required parameter 'source' when calling update_preconfiguredproducts" if source.nil?
      
      # resource path
      local_var_path = "/v/{version}/source/{source}/preconfiguredproducts/".sub('{format}','json').sub('{' + 'version' + '}', version.to_s).sub('{' + 'source' + '}', source.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(preconfigured_product_insert)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PreconfiguredProductsInsertResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreconfiguredproductsApi#update_preconfiguredproducts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end

end
