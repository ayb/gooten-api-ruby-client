=begin
Gooten API

An overview of the various API methods that Gooten offers, including examples of each.

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for GootenApiClient::ProductvariantsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ProductvariantsApi' do
  before do
    # run before each test
    @instance = GootenApiClient::ProductvariantsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ProductvariantsApi' do
    it 'should create an instact of ProductvariantsApi' do
      @instance.should be_a(GootenApiClient::ProductvariantsApi)
    end
  end

  # unit tests for get_productvariants
  # Get a list of available product variations. Includes pricing information
  # Get a list of all available product variations, or if one passes in a specific product type id (productId), gets a list of available variations of a recipe product.
  # @param country_code The country code the order would be shipped to. For example, &#39;US&#39; or &#39;FR&#39;
  # @param product_id Recipe product ID, such as those returned from the /products service
  # @param version Version of the api being used
  # @param source Description of the source-- ios, android, api, widget
  # @param [Hash] opts the optional parameters
  # @option opts [String] :partner_billing_key Partner billing key
  # @option opts [String] :all Whether or not to return all available printio products, or just ones in your recipe. Pass &#39;true&#39; or &#39;false&#39;.
  # @option opts [String] :language_code Two-character language code, defaults to \&quot;en\&quot; (english)
  # @option opts [String] :currency_code Three character currency code, defaults to \&quot;USD\&quot; (united states dollar)
  # @return [ProductVariantResponse]
  describe 'get_productvariants test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
